payment . js
import React, { useState } from "react";
import { Link, Navigate, useNavigate } from "react-router-dom";
import CheckoutProduct from "./CheckoutProduct";
import "./Payment.css";
import { useStateValue } from "./StateProvider";
import { CardElement, useStripe, useElements } from "@stripe/react-stripe-js";
import CurrencyFormat from "react-currency-format";
import { getBasketTotal } from "./reducer";
import { useEffect } from "react";
import axios from "./Axios.js";
const Payment = () => {
  const [{ basket, user }, dispatch] = useStateValue();
  const stripe = useStripe();
  const elements = useElements();
  const [processing , setProcessing] =useState(false);
  const [succeded , setSucceded]= useState("");
  const [error, setError] = useState(null);
  const [disabled, setDisabled] = useState(true);
  const [clientSecret, setClientSecret] = useState(true);
  useEffect(()=>{
      //generate the special stripe secret to charge the customer
      //when basket changes we need t tell stripe give new secret
        const getClientSecret= async ()=>{
            const respone = await axios({
              method: 'post',
              //stripe expects currency 
              url: `/payments/create/?total=${getBasketTotal(basket) * 100}`
            })  
            setClientSecret(respone.data.clientSecret)
        }
  },[basket])
  console.log('secret is ',clientSecret)

  const navigate = useNavigate();


  const handleSubmit = async (event) => {

    //fancy stipe shit
    event.prevent.Default();
    setProcessing(true);
    //const payload = await stripe
    const payload = await stripe.confirmCardPayment(clientSecret,{
      payment_method:{
        card:elements.getElement(CardElement)
      }
    }).then(({paymentIntend}) =>{
      //paymentIntend=payment confirmation in our terms
       setSucceded(true)
       setError(null)
       setProcessing(false)
       navigate.replace('/oders')
    })

  };
  const handleChange = (e) => {
    setDisabled(Event.empty);
    setError(Event.error ? Event.error.message : "");
  };

  return (
    
    <div className="payment">
      <div className="payment__container">
        <h1>
          Checkout (<Link to="/checkout">{basket?.length} items</Link>)
        </h1>
        <div className="payment__section">
          <div className="payment__title">
            <h3>Delivery Address</h3>
          </div>
          <div className="payment__address">
            <p>{user?.email}</p>
            <p>J.P Nagar</p>
            <p>Bangalore:560078</p>
          </div>
        </div>
        <div className="payment__section">
          <div className="payment__title">
            <h3>Rivew Item and Deliver</h3>
          </div>
          <div className="payment__item">
            {basket.map((item) => (
              <CheckoutProduct
                id={item.id}
                title={item.title}
                image={item.image}
                price={item.price}
                rating={item.rating}
              />
            ))}
          </div>
        </div>
        <div className="payment__section">
          <div className="payment__title">
            <h3>Payment Method</h3>
          </div>
          <div className="payment__details">
            <form onSubmit={handleSubmit} action="">
              <CardElement onChange={handleChange} />
              <div className="payment__priceContainer">
                <CurrencyFormat
                  renderText={(value) => (
                    <>
                      <h3>Oder Total :{value}</h3>
                    </>
                  )}
                  decimalScale={2}
                  value={getBasketTotal(basket)}
                  displayType={"text"}
                  thousandSeparator={true}
                  prefix={"â‚¹"}
                />
                <button disabled={processing || disabled || succeded}>
                    <span>{processing ? <p>Processing</p> : "Buy Now"}</span>
                </button>

              </div>
              {error && <div>{error}</div>}
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Payment;



and the code for index.js in functions
const functions = require("firebase-functions");
const express = require ("express");
const cors = require("cors");
const { request, response } = require("express");

const stripe = require ("stripe")('sk_test_51KsSipSCCbalLSeDJlCgpheYCuo4me6hvsOboYc1mqtEEFqm0AFlOBJ8EXFe9okBQoBCmuswRGZLmhdjJuDkiPp600RQrfhLZ6')
//API

// App config
const app= express();

//Middlewares
app.use(cors({origin:true}));
app.use(express.json());


//Apri roots
app.post('/payments/create',async (request,response)=>{
    const total= request.body.total;
    console.log('Payment request Recived!!for this amount >>>>',total)
    const paymentIntend = await stripe.paymentIntend.create({
      amount: total, // subunits of the currency
      currency: "inr",
    });

  
    // Ok 
    response.status(201).send({
      clientSecret: paymentIntend.client_secret,

    });
  

  });



//listen Commands

exports.api = functions.https.onRequest(app)





